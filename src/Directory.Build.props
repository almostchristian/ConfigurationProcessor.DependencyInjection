<Project>
   <PropertyGroup>
      <NoWarn>$(NoWarn);NU5128;NU5105;</NoWarn>
      <PackageOutputPath>$(MSBuildThisFileDirectory)..\packages</PackageOutputPath>
   </PropertyGroup>

   <PropertyGroup>
      <Version>1.12.0</Version>
      <PackageVersion>$(Version)</PackageVersion>
   </PropertyGroup>

   <PropertyGroup Condition="$(MSBuildProjectName.EndsWith('.Generator')) OR $(MSBuildProjectName.EndsWith('.SourceGeneration'))">
	  <Version>0.5.0</Version>
	  <PackageVersion>$(Version)-beta.1</PackageVersion>
   </PropertyGroup>

   <PropertyGroup>
	  <License>MIT</License>
      <FileVersion>$(Version).$([System.DateTime]::Now.ToString(yy))$([System.DateTime]::Now.DayOfYear.ToString(000))</FileVersion>
      <InformationalVersion>$(FileVersion)-$(GIT_VERSION)</InformationalVersion>
      <Authors>almostchristian</Authors>
	  <PackageLicenseExpression>Apache-2.0</PackageLicenseExpression>
      <PackageProjectUrl>https://github.com/almostchristian/ConfigurationProcessor.DependencyInjection</PackageProjectUrl>
      <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
      <WarningsAsErrors />
      <DebugType>Portable</DebugType>
      <HighEntropyVA>true</HighEntropyVA>
      <GenerateDocumentationFile>true</GenerateDocumentationFile>
      <IsPackable>true</IsPackable>
      <PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
      <Nullable>enable</Nullable>
      <PackageTags>dependencyinjection;configuration;ioc;di;</PackageTags>
      <PackageReadmeFile>README.md</PackageReadmeFile>
      <PackageReleaseNotes>
v1.13.0
   - Refactor code to support source generation package
v1.12.0
   - Specify license as Apache 2.0
v1.11.0
   - Added support for mapping to Dictionary&lt;T, Action&lt;TArg&gt;&gt;
v1.10.0
   - Support Action delegates of any number of parameters as configuration targets.
v1.9.0
   - Support Action delegates of up to 7 generic arguments as configuration targets.
v1.8.1
   - Support Action&lt;T1, T2&gt; and Action&lt;T1, T2, T3&gt; as configuration targets.
v1.7.2
   - Added special handling for retrieving ConnectionStrings
   - Lambda parameters can now be in any position
v1.6.1
   - Fixed dynamic invocation issues with optional parameters
v1.6.0
   - Added IConfigurationProcessor interface to dynamically call methods
v1.5.1
   - Fixed exception with optional parameters
v1.5.0
   - Improve selection of single parameter overload method.
   - Improve binding to readonly properties
v1.4.0
   - Improve discovery of executable methods to include implemented interfaces
v1.3.0
   - Add support for disambiguating overloads with different array types.
   - Prefer overloads with the most matching parameters
v1.2.1
   - Fix MissingMethodException when there exists a candidate method with no parameters is not chosen correctly.
v1.2.0
   - Added interception for missing extension method event
v1.1.1
   - Ignore TypeLoadException when scanning for extension methods
v1.1.0
   - Added support for binding with interface configuration actions
v1.0.0
   - Initial release
      </PackageReleaseNotes>
   </PropertyGroup>

   <ItemGroup Condition="! $(MSBuildProjectName.EndsWith('.Generator'))">
      <None Include="$(MSBuildThisFileDirectory)\..\README.md">
         <Pack>True</Pack>
         <PackagePath>\</PackagePath>
      </None>
   </ItemGroup>

   <PropertyGroup Condition="'$(Configuration)' == 'Release'">
      <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
      <DebugSymbols>true</DebugSymbols>
      <IncludeSymbols>true</IncludeSymbols>
      <PublishRepositoryUrl>true</PublishRepositoryUrl>
      <EmbedUntrackedSources>true</EmbedUntrackedSources>
      <SymbolPackageFormat>snupkg</SymbolPackageFormat>
      <EnablePackageValidation>true</EnablePackageValidation>
      <EnableNETAnalyzers>true</EnableNETAnalyzers>
      <AnalysisMode>AllEnabledByDefault</AnalysisMode>
	  <BeforePack>$(BeforePack);IncludeAnalyzersInPackage;</BeforePack>
   </PropertyGroup>

   <PropertyGroup Condition="'$(TargetFramework)'=='netstandard2.0'">
      <NoWarn>$(NoWarn);CA1062</NoWarn>
   </PropertyGroup>

   <PropertyGroup>
      <LangVersion>11</LangVersion>
   </PropertyGroup>

   <ItemGroup>
      <None Include="$(MSBuildThisFileDirectory)LICENSE">
         <Pack>True</Pack>
         <PackagePath></PackagePath>
      </None>
   </ItemGroup>

   <ItemGroup>
	  <PackageReference Include="PolySharp" Version="1.13.2">
		 <PrivateAssets>all</PrivateAssets>
		 <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
	  </PackageReference>
      <PackageReference Include="Microsoft.CodeAnalysis" Version="4.2.0" PrivateAssets="all">
         <PrivateAssets>all</PrivateAssets>
         <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      </PackageReference>
      <PackageReference Include="ReflectionAnalyzers" Version="0.3.1">
         <PrivateAssets>all</PrivateAssets>
         <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
      </PackageReference>
      <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.1.1">
         <PrivateAssets>all</PrivateAssets>
         <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      </PackageReference>
      <PackageReference Include="StyleCop.Analyzers" Version="1.2.0-beta.*">
         <PrivateAssets>all</PrivateAssets>
         <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      </PackageReference>
      <PackageReference Include="SonarAnalyzer.CSharp" Version="8.*">
         <PrivateAssets>all</PrivateAssets>
         <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      </PackageReference>
      <AdditionalFiles Include="$(MSBuildThisFileDirectory)\..\stylecop.json" Link="stylecop.json" />
   </ItemGroup>
   
   <Target Name="IncludeAnalyzersInPackage"
		   Condition="'@(ProjectReference)' != '' and @(ProjectReference->AnyHaveMetadataValue('PackAsAnalyzer', 'true'))">
	  <MSBuild Projects="@(ProjectReference->WithMetadataValue('PackAsAnalyzer', 'true'))"
			   Targets="GetAnalyzerPackFiles"
			   RemoveProperties="SetTargetFramework">
		 <Output TaskParameter="TargetOutputs" ItemName="_AnalyzerFile" />
	  </MSBuild>

	  <ItemGroup>
		 <Content Include="@(_AnalyzerFile)" Pack="True" Condition="!%(_AnalyzerFile.IsSymbol)" />
		 <!-- Symbols don't honor PackagePath.  By default they are placed in lib/%(TargetFramework).
           Pack does honor TargetPath and does Path.Combine("lib/%(TargetFramework)", "%(TargetPath)"),
           so a rooted path value for TargetPath will override lib.
           https://github.com/NuGet/Home/issues/10860 -->
		 <_TargetPathsToSymbols Include="@(_AnalyzerFile)" TargetPath="/%(_AnalyzerFile.PackagePath)" Condition="%(_AnalyzerFile.IsSymbol)" />
	  </ItemGroup>
   </Target>

   <Target Name="GetAnalyzerPackFiles"
		   DependsOnTargets="$(GenerateNuspecDependsOn)"
		   Returns="@(_AnalyzerPackFile)">
	  <PropertyGroup>
		 <_analyzerPath>analyzers/dotnet</_analyzerPath>
		 <_analyzerPath Condition="'$(AnalyzerRoslynVersion)' != ''">$(_analyzerPath)/roslyn$(AnalyzerRoslynVersion)</_analyzerPath>
		 <_analyzerPath Condition="'$(AnalyzerLanguage)' != ''">$(_analyzerPath)/$(AnalyzerLanguage)</_analyzerPath>
	  </PropertyGroup>

	  <!-- Filter on netstandard2.0 so that generator projects can multi-target for the purpose of enabling nullable reference type compiler checks. -->
	  <ItemGroup>
		 <_AnalyzerPackFile Include="@(_BuildOutputInPackage->WithMetadataValue('TargetFramework', 'netstandard2.0'))" IsSymbol="false" />
		 <_AnalyzerPackFile Include="@(_TargetPathsToSymbols->WithMetadataValue('TargetFramework', 'netstandard2.0'))" IsSymbol="true" />
		 <_AnalyzerPackFile PackagePath="$(_analyzerPath)/%(TargetPath)" />
	  </ItemGroup>

	  <Error Text="Analyzers must target netstandard2.0 since they run in the compiler which targets netstandard2.0. $(MSBuildProjectFullPath) targets '$([MSBuild]::ValueOrDefault('$(TargetFrameworks)', '$(TargetFramework)'))' instead."
			 Condition="'@(_AnalyzerPackFile)' == ''" />
   </Target>
</Project>
