using ConfigurationProcessor.DependencyInjection.SourceGeneration.Parsing;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.Extensions.DependencyModel;
using System.Reflection;
using System.Text;

namespace ConfigurationProcessor.DependencyInjection.SourceGeneration.UnitTests;

public class EmitterTests
{
    [Fact]
    public void AddServicesWithContextPaths()
    {
        TestConfig(
            @"{
   ""Services"": {
      ""WithChildren"": {
         ""SimpleString"": ""helloworld""
      }
   },
   ""ComplexObject"": true
}",
            @"var sectionWithChildren = servicesSection.GetSection(""WithChildren"");
if (sectionWithChildren.Exists())
{
   services.WithChildren(options =>
   {
      // options.SimpleString = sectionWithChildren.GetValue<string>(""SimpleString"");
   });
}");
    }

    private static void TestConfig(string inputJson, string expectedCsharpFragment)
    {
        var emitter = new Emitter();

        var configurationValues = JsonConfigurationFileParser.Parse(new MemoryStream(Encoding.UTF8.GetBytes(inputJson)));
        var rc = new ServiceRegistrationClass
        {
            Name = "Test",
            Namespace = "TestApp",
            ParentClass = null,
            Keyword = "class",
        };
        rc.Methods.Add(new ServiceRegistrationMethod("Register", "IServiceCollection services, IConfiguration configuration", "public partial void", configurationValues, "Services")
        {
            ConfigurationField = "configuration",
            ServiceCollectionField = "services",
        });

        var assemblies = GetLoadedAssemblies();

        var generatedCsharp = emitter.Emit(new[] { rc }, assemblies, default);
        var expectedCsharp = @$"// <auto-generated/>

namespace TestApp
{{
   static partial class Test
   {{
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""ConfigurationProcessor.DependencyInjection.Generator"", ""0.1.0"")]
      public partial void void Register(this IServiceCollection services, IConfiguration configuration)
      {{
         var servicesSection = configuration.GetSection(""Services"");
         if (!servicesSection.Exists())
         {{
            return;
         }}
         
{IndentLines(expectedCsharpFragment, "         ")}
      }}
   }}
}}";

        Assert.Equal(expectedCsharp, generatedCsharp.Trim());
    }

    private static List<Assembly> GetLoadedAssemblies()
    {
        var dependencyContext = DependencyContext.Default;

        var query = from assemblyName in dependencyContext.RuntimeLibraries
                        .SelectMany(l => l.GetDefaultAssemblyNames(dependencyContext)).Distinct()
                    select assemblyName;

        return query.Select(Assembly.Load).ToList();
    }

    private static string IndentLines(string input, string indent)
    {
        var lines = input.Split(Environment.NewLine);
        var sb = new StringBuilder();
        foreach (var line in lines)
        {
            sb.Append(indent);
            sb.AppendLine(line);
        }

        return sb.ToString().TrimEnd();
    }
}